{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Problema de Fotogrametria\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "Dado o modelo matemático da equação de uma linha de vista em fotogrametria, a saber:\n",
        "\n",
        "$ x \\cos(\\theta) + y \\sin(\\theta) + z \\sin(\\phi) - d = 0 $\n",
        "\n",
        "Considere que 10 pontos de coordenadas cartesianas foram observados \\( n \\) vezes, e para cada observação foram atribuídas variâncias de diferentes qualidades.\n",
        "\n",
        "### **Dados **\n",
        "\n",
        "| index |       x       |       y       |       z       |  rho_observed  |  variance  |\n",
        "|-------|---------------|---------------|---------------|----------------|------------|\n",
        "| 0     | -1.2801       |  2.4227       |  5.0525       | -11.6658       | 0.9678     |\n",
        "| 1     | -9.4815       |  0.5828       |  0.6529       | -20.5115       | 0.7017     |\n",
        "| 2     |  0.9933       | -7.3084       |  4.2812       | -17.6597       | 1.1404     |\n",
        "| 3     | -1.2936       |  0.2716       |  0.9653       | -14.4755       | 0.9831     |\n",
        "| 4     | -1.5926       | -6.3112       |  1.2716       | -21.8260       | 1.0052     |\n",
        "| 5     | -3.3933       |  5.7067       |  5.9675       |  -8.7501       | 0.8869     |\n",
        "| 6     | -5.9070       |  7.0795       |  2.2601       | -11.3716       | 1.2936     |\n",
        "| 7     |  2.3854       | -0.1153       |  1.0695       | -13.2089       | 1.0800     |\n",
        "| 8     | -4.0069       |  6.9312       |  2.2031       | -11.3331       | 0.6623     |\n",
        "| 9     | -4.6635       | -8.4071       |  3.4983       | -22.4406       | 1.2008     |\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "fUm-R_kDwiGZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Perguntas:**\n",
        "\n"
      ],
      "metadata": {
        "id": "9DhgMxHRyUme"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. Quem são as observações ou medidas e quais os parâmetros a serem determinados?"
      ],
      "metadata": {
        "id": "2vUxPr6-y1-B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Queremos determinar os parâmetros $ρ$ $θ$ e $φ$"
      ],
      "metadata": {
        "id": "c279J6A9yr1x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2. O modelo matemático $ F $ é explícito ou implícito?\n"
      ],
      "metadata": {
        "id": "xgATaf2oyiij"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Implicíto"
      ],
      "metadata": {
        "id": "og-GRL3cylBZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. $ F $ é linear ou não linear?\n"
      ],
      "metadata": {
        "id": "HAxx4WYcyloo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### O modelo matemático é não linear, por possuir termos trigonométricos (seno e cosseno) influênciando no comportamento da função."
      ],
      "metadata": {
        "id": "CsuHP7BAyneS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Existe deficiência de posto na matriz das equações normais $ N $?"
      ],
      "metadata": {
        "id": "eN5DEPzTyozQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Ao avaliar a matriz de equações normais N, existe uma deficiência se, e somente se, uma das linhas da matriz for combinação linear das outras. Ou seja, ao reduzir a matriz ao seu menor posto(modo escada) e alguma das linhas for zero, existe uma deficiência de posto da matriz N."
      ],
      "metadata": {
        "id": "kuvI-lghyp-A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Parâmetros Estimados:**"
      ],
      "metadata": {
        "id": "HUHiIJxs0JpD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Modelo Matemático\n",
        "$ x \\cos(\\theta) + y \\sin(\\theta) + z \\sin(\\phi) - d = 0 $"
      ],
      "metadata": {
        "id": "Ohk3M_d1HFOe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import sympy as sp\n",
        "from sympy import *\n",
        "import math as mt\n"
      ],
      "metadata": {
        "id": "yHDmq2zjv60U"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Cálculo para estimar os valores de $θ$ e $Φ$ utilizando o metodo dos minimos quadrados ponderados\n"
      ],
      "metadata": {
        "id": "67jNbaVc9wx0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Tabela dos dados XYZ*"
      ],
      "metadata": {
        "id": "iWT1hr0K_wKk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.array([-1.2801, -9.4815, 0.9933, -1.2936, -1.5926, -3.3933, -5.9070, -2.3854, -4.0069, -4.6635])\n",
        "y = np.array([2.4227, 0.5828, -7.3084, 0.2716, -6.3112, 5.7067, 7.0795, -0.1153, 6.9312, -8.4071])\n",
        "z = np.array([5.0525, 0.6529, 4.2812, 0.9653, 1.2716, 5.9675, 2.2601, 1.0695, 2.2031, 3.4983])\n",
        "rho = np.array([-11.6658, -20.5115, -17.6597, -14.4755, -21.8260, -8.7501, -11.3716, -13.2089, -11.3331, -22.4406])\n",
        "variancias = np.array([0.9678, 0.7017, 1.1404, 0.9831, 1.0052, 0.8869, 1.2936, 1.0800, 0.6623, 1.2008])\n",
        "LB = import numpy as np\n",
        "\n",
        "# Dados fornecidos\n",
        "x = np.array([-1.2801, -9.4815, 0.9933, -1.2936, -1.5926, -3.3933, -5.9070, -2.3854, -4.0069, -4.6635])\n",
        "y = np.array([2.4227, 0.5828, -7.3084, 0.2716, -6.3112, 5.7067, 7.0795, -0.1153, 6.9312, -8.4071])\n",
        "z = np.array([5.0525, 0.6529, 4.2812, 0.9653, 1.2716, 5.9675, 2.2601, 1.0695, 2.2031, 3.4983])\n",
        "\n",
        "# Criação do vetor de tuplas\n",
        "dicionario = np.array(list(zip(x, y, z)))\n",
        "\n",
        "# Exibição do vetor de tuplas\n",
        "print(dicionario)\n"
      ],
      "metadata": {
        "id": "M6G3asNp_u09",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "85a52dba-3497-486f-83ff-a4a9ae79b9dc"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-1.2801  2.4227  5.0525]\n",
            " [-9.4815  0.5828  0.6529]\n",
            " [ 0.9933 -7.3084  4.2812]\n",
            " [-1.2936  0.2716  0.9653]\n",
            " [-1.5926 -6.3112  1.2716]\n",
            " [-3.3933  5.7067  5.9675]\n",
            " [-5.907   7.0795  2.2601]\n",
            " [-2.3854 -0.1153  1.0695]\n",
            " [-4.0069  6.9312  2.2031]\n",
            " [-4.6635 -8.4071  3.4983]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Vetor de Leituras LB"
      ],
      "metadata": {
        "id": "abJ9BBnYHPD8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dados fornecidos\n",
        "x = np.array([-1.2801, -9.4815, 0.9933, -1.2936, -1.5926, -3.3933, -5.9070, -2.3854, -4.0069, -4.6635])\n",
        "y = np.array([2.4227, 0.5828, -7.3084, 0.2716, -6.3112, 5.7067, 7.0795, -0.1153, 6.9312, -8.4071])\n",
        "z = np.array([5.0525, 0.6529, 4.2812, 0.9653, 1.2716, 5.9675, 2.2601, 1.0695, 2.2031, 3.4983])\n",
        "\n",
        "\n",
        "LB = Matrix([x[0], y[0], z[0],x[1], y[1], z[1],x[2], y[2], z[2],x[3], y[3], z[3],x[4], y[4], z[4],x[5], y[5], z[5],x[6], y[6], z[6],x[7], y[7], z[7],x[8], y[8], z[8],x[9], y[9], z[9]])\n",
        "LB"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "yEGfYE0eHONl",
        "outputId": "3825f4aa-5d48-499b-d4f6-c5a5c85eb3ad"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[-1.2801],\n",
              "[ 2.4227],\n",
              "[ 5.0525],\n",
              "[-9.4815],\n",
              "[ 0.5828],\n",
              "[ 0.6529],\n",
              "[ 0.9933],\n",
              "[-7.3084],\n",
              "[ 4.2812],\n",
              "[-1.2936],\n",
              "[ 0.2716],\n",
              "[ 0.9653],\n",
              "[-1.5926],\n",
              "[-6.3112],\n",
              "[ 1.2716],\n",
              "[-3.3933],\n",
              "[ 5.7067],\n",
              "[ 5.9675],\n",
              "[ -5.907],\n",
              "[ 7.0795],\n",
              "[ 2.2601],\n",
              "[-2.3854],\n",
              "[-0.1153],\n",
              "[ 1.0695],\n",
              "[-4.0069],\n",
              "[ 6.9312],\n",
              "[ 2.2031],\n",
              "[-4.6635],\n",
              "[-8.4071],\n",
              "[ 3.4983]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}-1.2801\\\\2.4227\\\\5.0525\\\\-9.4815\\\\0.5828\\\\0.6529\\\\0.9933\\\\-7.3084\\\\4.2812\\\\-1.2936\\\\0.2716\\\\0.9653\\\\-1.5926\\\\-6.3112\\\\1.2716\\\\-3.3933\\\\5.7067\\\\5.9675\\\\-5.907\\\\7.0795\\\\2.2601\\\\-2.3854\\\\-0.1153\\\\1.0695\\\\-4.0069\\\\6.9312\\\\2.2031\\\\-4.6635\\\\-8.4071\\\\3.4983\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*função para estimar os angulos*\n"
      ],
      "metadata": {
        "id": "g8BYMf6HCsw_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def estimar_parametros_wls(x, y, z, rho, variancias):\n",
        "    # Montando a matriz A\n",
        "    A = np.column_stack((x, y, z, -np.ones_like(x)))\n",
        "\n",
        "    # Criando a matriz de pesos W (diagonal)\n",
        "    W = np.diag(1 / variancias)\n",
        "\n",
        "    # Calculando os parâmetros usando mínimos quadrados ponderados (WLS)\n",
        "    ATW = A.T @ W\n",
        "    parametros = np.linalg.inv(ATW @ A) @ ATW @ rho\n",
        "\n",
        "    # Separando os parâmetros\n",
        "    a1, a2, a3, d = parametros\n",
        "\n",
        "    # Calculando os valores de theta e phi\n",
        "    theta_estimativa = np.arctan2(a2, a1)  # Theta em radianos\n",
        "    phi_estimativa = np.arcsin(a3)         # Phi em radianos\n",
        "\n",
        "    # Convertendo theta e phi para graus\n",
        "    theta_graus = np.degrees(theta_estimativa)\n",
        "    phi_graus = np.degrees(phi_estimativa)\n",
        "\n",
        "    # Exibindo os resultados\n",
        "    return theta_graus, phi_graus, d"
      ],
      "metadata": {
        "id": "3xa0zjeHCr_I"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Função para converter de graus decimais para Graus° Minutos' Segundos\"\n"
      ],
      "metadata": {
        "id": "mFDLHxyfEx2V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def graus_para_gms(graus):\n",
        "\n",
        "    d = int(graus)\n",
        "\n",
        "\n",
        "    minutos = (graus - d) * 60\n",
        "    m = int(minutos)\n",
        "\n",
        "    # Calculate the seconds part\n",
        "    segundos = (minutos - m) * 60\n",
        "    s = round(segundos, 2)\n",
        "\n",
        "    return d, m, s\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "AHgqVQKUE30m"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Agora chamamos a função com os dados fornecidos pela questão"
      ],
      "metadata": {
        "id": "BUg-Z5mRDJqu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "theta_graus, phi_graus, d = estimar_parametros_wls(x, y, z, rho, variancias)\n"
      ],
      "metadata": {
        "id": "zwqZp4UoDNdG"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **$\\theta_{est}$ (rad)**:\n",
        "\n"
      ],
      "metadata": {
        "id": "FTX9mTBY0SOp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "theta_graus*mt.pi/180"
      ],
      "metadata": {
        "id": "Fwo8X8rN0pRl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "8fc6613e-b6de-4cce-9b10-001f896cec75"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8674244043388413"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **$\\theta_{est}$ (graus)**:\n"
      ],
      "metadata": {
        "id": "rseBga2N0p4A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g,m,s = graus_para_gms(theta_graus)\n",
        "#theta_gms = graus_para_gms(theta_graus)\n",
        "print(f\"{g}° {m}' {s}\\\"\")"
      ],
      "metadata": {
        "id": "3ebEVFBK0sSb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "c7125fc9-c336-4b12-b24f-52ba12ca6bb4"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "49° 41' 59.13\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **$\\phi_{est}$ (rad)**:"
      ],
      "metadata": {
        "id": "yJgLONto3BTg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "phi_graus*mt.pi/180"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "JqwNyI5B3EUz",
        "outputId": "1196c2db-7900-4367-ca8b-60712e744dc2"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4982383533923853"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **$\\phi_{est}$ (graus)**:"
      ],
      "metadata": {
        "id": "s74A1wZu3vBj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g1,m1,s1 = graus_para_gms(phi_graus)\n",
        "print(f\"{g1}° {m1}' {s1}\\\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "SE_V4ofC3xcn",
        "outputId": "59e95a08-6d1d-471a-c34a-5c7a4e30253d"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28° 32' 49.04\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **$\\rho_{est}$**:"
      ],
      "metadata": {
        "id": "0xUv8_Fq0sqS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"{d} m\")"
      ],
      "metadata": {
        "id": "1SJc9mft05Sx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "28f29d58-ea8f-4f01-b9f4-3ebe4f42c29d"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14.466941616354635 m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- **MSE (Erro Quadrático Médio)**:"
      ],
      "metadata": {
        "id": "SNIf49up05sQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "soma = 0\n",
        "for i in range(len(rho)):\n",
        "  soma+=(rho[i]+d)**2\n",
        "\n",
        "mse=soma/len(rho)\n",
        "mse\n",
        "\n"
      ],
      "metadata": {
        "id": "WU-NLvp607T6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "3d81664f-b4e7-4725-8d39-5526377f7c9d"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "22.597887783671652"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Construção da Matriz de Design ( A ):**\n"
      ],
      "metadata": {
        "id": "xVZgpjhJzY1E"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">\n",
        "   $$\n",
        "   A = \\begin{pmatrix}\n",
        "   x_1 & y_1 & z_1 & 1 \\\\\n",
        "   x_2 & y_2 & z_2 & 1 \\\\\n",
        "   \\vdots & \\vdots & \\vdots & \\vdots \\\\\n",
        "   x_{10} & y_{10} & z_{10} & 1 \\\\\n",
        "   \\end{pmatrix}\n",
        "   $$"
      ],
      "metadata": {
        "id": "w1lY3Ftp1O2o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.column_stack((x, y, z, -np.ones_like(x)))\n",
        "A"
      ],
      "metadata": {
        "id": "8eYajMtYzvnQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "0e6b571b-6e3f-43b1-e6b7-b9f2b2b70079"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.2801,  2.4227,  5.0525, -1.    ],\n",
              "       [-9.4815,  0.5828,  0.6529, -1.    ],\n",
              "       [ 0.9933, -7.3084,  4.2812, -1.    ],\n",
              "       [-1.2936,  0.2716,  0.9653, -1.    ],\n",
              "       [-1.5926, -6.3112,  1.2716, -1.    ],\n",
              "       [-3.3933,  5.7067,  5.9675, -1.    ],\n",
              "       [-5.907 ,  7.0795,  2.2601, -1.    ],\n",
              "       [-2.3854, -0.1153,  1.0695, -1.    ],\n",
              "       [-4.0069,  6.9312,  2.2031, -1.    ],\n",
              "       [-4.6635, -8.4071,  3.4983, -1.    ]])"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Construção da Matriz de Pesos ( W ):**"
      ],
      "metadata": {
        "id": "JzwxhydUzm73"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "   $$\n",
        "   W = \\begin{pmatrix}\n",
        "   \\frac{1}{\\sigma_1^2} & 0 & \\cdots & 0 \\\\\n",
        "   0 & \\frac{1}{\\sigma_2^2} & \\cdots & 0 \\\\\n",
        "   \\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
        "   0 & 0 & \\cdots & \\frac{1}{\\sigma_{10}^2} \\\\\n",
        "   \\end{pmatrix}\n",
        "   $$\n"
      ],
      "metadata": {
        "id": "9jEWVtvW1YXQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#matriz de pesos tem dimensões 30x30\n",
        "#variancias = np.array([0.9678, 0.7017, 1.1404, 0.9831, 1.0052, 0.8869, 1.2936, 1.0800, 0.6623, 1.2008])\n",
        "\n",
        "#W=np.diag([1/variancias[0], 1/variancias[0], 1/variancias[0], 1/variancias[1], 1/variancias[1], 1/variancias[1], 1/variancias[2], 1/variancias[2], 1/variancias[2], 1/variancias[3], 1/variancias[3], 1/variancias[3], 1/variancias[4], 1/variancias[4], 1/variancias[4], 1/variancias[5], 1/variancias[5], 1/variancias[5], 1/variancias[6], 1/variancias[6],1/variancias[6], 1/variancias[7], 1/variancias[7], 1/variancias[7] )\n",
        "W=np.diag([1/variancias[0], 1/variancias[0], 1/variancias[0], 1/variancias[1], 1/variancias[1], 1/variancias[1], 1/variancias[2], 1/variancias[2], 1/variancias[2], 1/variancias[3], 1/variancias[3], 1/variancias[3], 1/variancias[4], 1/variancias[4], 1/variancias[4], 1/variancias[5], 1/variancias[5], 1/variancias[5], 1/variancias[6], 1/variancias[6],1/variancias[6], 1/variancias[7], 1/variancias[7],1/variancias[7], 1/variancias[8], 1/variancias[8], 1/variancias[8], 1/variancias[9], 1/variancias[9],1/variancias[9]])\n",
        "W= Matrix(W)\n",
        "verf= W.shape\n",
        "verf"
      ],
      "metadata": {
        "id": "OG4dN754zuPZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "c4326a53-3e46-498d-e3ff-6b4ef9f0cd9a"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(30, 30)"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3.** **Método dos Mínimos Quadrados Ponderados (WLS)**:\n",
        "   Use o método dos mínimos quadrados ponderados para ajustar o modelo e determinar $\\theta $, $ \\phi $ e $ d $."
      ],
      "metadata": {
        "id": "MJgjkgB81jsZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Usando a biblioteca sympy, primeiro iremos criar a simbologia para nossas equações:\n"
      ],
      "metadata": {
        "id": "1kX7raI5Nhqs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Equações"
      ],
      "metadata": {
        "id": "51X7cce6NpUj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Criando explicitamente os símbolos necessários\n",
        "x1, y1, z1 = sp.symbols('x1 y1 z1')\n",
        "x2, y2, z2 = sp.symbols('x2 y2 z2')\n",
        "x3, y3, z3 = sp.symbols('x3 y3 z3')\n",
        "x4, y4, z4 = sp.symbols('x4 y4 z4')\n",
        "x5, y5, z5 = sp.symbols('x5 y5 z5')\n",
        "x6, y6, z6 = sp.symbols('x6 y6 z6')\n",
        "x7, y7, z7 = sp.symbols('x7 y7 z7')\n",
        "x8, y8, z8 = sp.symbols('x8 y8 z8')\n",
        "x9, y9, z9 = sp.symbols('x9 y9 z9')\n",
        "x10, y10, z10 = sp.symbols('x10 y10 z10')\n",
        "\n",
        "a,b,c,d = sp.symbols('a b c d')\n",
        "\n",
        "# Definindo as equações explicitamente\n",
        "eq1 = x1 * a + y1 * b + z1 * c - d\n",
        "eq2 = x2 * a + y2 * b + z2 * c - d\n",
        "eq3 = x3 * a + y3 * b + z3 * c - d\n",
        "eq4 = x4 * a + y4 * b + z4 * c - d\n",
        "eq5 = x5 * a + y5 * b + z5 * c - d\n",
        "eq6 = x6 * a + y6 * b + z6 * c - d\n",
        "eq7 = x7 * a + y7 * b + z7 * c - d\n",
        "eq8 = x8 * a + y8 * b + z8 * c - d\n",
        "eq9 = x9 * a + y9 * b + z9 * c - d\n",
        "eq10 = x10 * a + y10 * b + z10 * c - d\n",
        "\n",
        "# Exibindo as equações\n",
        "vetorequacao=Matrix([eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9, eq10])\n",
        "vetorequacao\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220
        },
        "id": "dqlwUjpdNrqD",
        "outputId": "e4832eca-d3c1-49d3-dbe6-0bae9bb969e5"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[   a*x1 + b*y1 + c*z1 - d],\n",
              "[   a*x2 + b*y2 + c*z2 - d],\n",
              "[   a*x3 + b*y3 + c*z3 - d],\n",
              "[   a*x4 + b*y4 + c*z4 - d],\n",
              "[   a*x5 + b*y5 + c*z5 - d],\n",
              "[   a*x6 + b*y6 + c*z6 - d],\n",
              "[   a*x7 + b*y7 + c*z7 - d],\n",
              "[   a*x8 + b*y8 + c*z8 - d],\n",
              "[   a*x9 + b*y9 + c*z9 - d],\n",
              "[a*x10 + b*y10 + c*z10 - d]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}a x_{1} + b y_{1} + c z_{1} - d\\\\a x_{2} + b y_{2} + c z_{2} - d\\\\a x_{3} + b y_{3} + c z_{3} - d\\\\a x_{4} + b y_{4} + c z_{4} - d\\\\a x_{5} + b y_{5} + c z_{5} - d\\\\a x_{6} + b y_{6} + c z_{6} - d\\\\a x_{7} + b y_{7} + c z_{7} - d\\\\a x_{8} + b y_{8} + c z_{8} - d\\\\a x_{9} + b y_{9} + c z_{9} - d\\\\a x_{10} + b y_{10} + c z_{10} - d\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Derivação da matriz A ou matriz design\n"
      ],
      "metadata": {
        "id": "WEenbNWmPoR3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Tratando os termos $cos(Θ) sin(Θ) sin(Φ) d$ como parâmetros, ao derivar o vetor de equações, ou seja, as 10 equações em relação a esses parâmetros, obtemos a matriz design A.**\n",
        "\n",
        "Fazendo uma analogia, tratando a,b,c como, $cos(\\theta) sen(\\theta) sen(\\phi)$ respectivamente, obtemos"
      ],
      "metadata": {
        "id": "3GECXy7cP18_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vetor_parametros = Matrix([a, b, c, d])\n",
        "vetor_parametros"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 98
        },
        "id": "h6lAsTHJPrrX",
        "outputId": "bc4b6f8c-058f-4a22-d6d7-30a4fdbfe239"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[a],\n",
              "[b],\n",
              "[c],\n",
              "[d]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}a\\\\b\\\\c\\\\d\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A1 = sp.zeros(10,4)\n",
        "for i in range(10):\n",
        "  for j in range(4):\n",
        "    A1[i,j]=sp.diff(vetorequacao[i],vetor_parametros[j])\n",
        "A1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220
        },
        "id": "nwzdDCfTSCeC",
        "outputId": "ce5f472a-c666-4fc5-d859-b5da6690a01a"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[ x1,  y1,  z1, -1],\n",
              "[ x2,  y2,  z2, -1],\n",
              "[ x3,  y3,  z3, -1],\n",
              "[ x4,  y4,  z4, -1],\n",
              "[ x5,  y5,  z5, -1],\n",
              "[ x6,  y6,  z6, -1],\n",
              "[ x7,  y7,  z7, -1],\n",
              "[ x8,  y8,  z8, -1],\n",
              "[ x9,  y9,  z9, -1],\n",
              "[x10, y10, z10, -1]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}x_{1} & y_{1} & z_{1} & -1\\\\x_{2} & y_{2} & z_{2} & -1\\\\x_{3} & y_{3} & z_{3} & -1\\\\x_{4} & y_{4} & z_{4} & -1\\\\x_{5} & y_{5} & z_{5} & -1\\\\x_{6} & y_{6} & z_{6} & -1\\\\x_{7} & y_{7} & z_{7} & -1\\\\x_{8} & y_{8} & z_{8} & -1\\\\x_{9} & y_{9} & z_{9} & -1\\\\x_{10} & y_{10} & z_{10} & -1\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Respectivamente, derivando em relação ás observações (x,y,z) resulta na matriz B, mas como os angulos Theta e Phi não mudam, todas as derivadas parciais de todas as equações são iguais.\n",
        "\n",
        "##Derivando a equação 1:\n",
        "$\\frac{\\partial f}{\\partial x1}$ = $\\frac{\\partial f}{\\partial x2}$ = $\\frac{\\partial f}{\\partial x3}$ = $\\frac{\\partial f}{\\partial x4}=$ $…$ $=\\frac{\\partial f}{\\partial x10}$\n",
        "\n",
        "\n",
        "logo o caso é valido também para y e z\n",
        "\n",
        "$\\frac{\\partial f}{\\partial x1}$ = $\\frac{\\partial f}{\\partial x2}$ = $\\frac{\\partial f}{\\partial x3}$ = $\\frac{\\partial f}{\\partial x4}=$ $…$ $=\\frac{\\partial f}{\\partial x10} ⟶\\frac{\\partial f}{\\partial y1}$ = $\\frac{\\partial f}{\\partial y2}$ = $\\frac{\\partial f}{\\partial y3}$ = $\\frac{\\partial f}{\\partial y4}=$ $…$ $=\\frac{\\partial f}{\\partial y10} ⟶ \\frac{\\partial f}{\\partial z1}$ = $\\frac{\\partial f}{\\partial z2}$ = $\\frac{\\partial f}{\\partial z3}$ = $\\frac{\\partial f}{\\partial z4}=$ $…$ $=\\frac{\\partial f}{\\partial z10}$\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "aR7WRtikS_Li"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "E1tfaov_T7Z3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# B=np.zeros((10,3))\n",
        "# costeta= np.cos(theta_graus*mt.pi/180)\n",
        "# senteta= np.sin(theta_graus*mt.pi/180)\n",
        "# senphi= np.sin(phi_graus*mt.pi/180)\n",
        "# B[:,0]=float(costeta)\n",
        "# B[:,1]=float(senteta)\n",
        "# B[:,2]=float(senphi)\n",
        "# B\n",
        "B=sp.ones(10,3)\n",
        "\n",
        "vetorleitura1 = sp.Matrix([x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4,x5,y5,z5,x6,y6,z6,x7,y7,z7,x8,y8,z8,x9,y9,z9,x10,y10,z10])\n",
        "B = sp.zeros(10,30)\n",
        "for i in range(10):\n",
        "  for j in range(30):\n",
        "      B[i,j] = sp.diff(vetorequacao[i],vetorleitura1[j])\n",
        "B = B.subs(dicionario2)\n",
        "B"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "LmkhhLqdTEdR",
        "outputId": "15fec826-f3e1-4474-f42b-8170661df220"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666,                 0,                 0,                 0],\n",
              "[                0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0, 0.699828501294052, 0.825202360938736, 0.477878805136666]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{array}{cccccccccccccccccccccccccccccc}0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.699828501294052 & 0.825202360938736 & 0.477878805136666\\end{array}\\right]$"
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Alfa\n",
        "$α = (A^T W A)^{-1}A^TWL $"
      ],
      "metadata": {
        "id": "x7OGO-aP8M05"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reciprocals = [1 / var for var in variancias]\n",
        "\n",
        "# Cria a matriz diagonal com os recíprocos das variâncias\n",
        "W1 = np.diag(reciprocals)\n",
        "\n",
        "W1 = sp.Matrix(W1)\n",
        "W1\n",
        "\n",
        "alfa = (A.T @ W1 @ A).inv() @ A.T @ W1 @ rho\n",
        "dicionario2 = {a:alfa[0],b:alfa[1],c:alfa[2],d:alfa[3]}\n",
        "alfa\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "NPC7BVLe8pIG",
        "outputId": "96ed1f6e-34d2-4ed0-91e9-2443c77c2d29"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.699828501294052, 0.825202360938736, 0.477878805136666,\n",
              "       14.4669416163546], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "vetor de erro\n"
      ],
      "metadata": {
        "id": "oj_GIXdF_OCQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "erro = rho - (A @ alfa)\n",
        "erro"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "AVt9uk_a_O2f",
        "outputId": "26142b5c-24de-4860-e41e-b3695cb41883"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.716708341938139, -0.202069456454641, 0.0971161601528081,\n",
              "       0.211318393799226, -1.64416506073970, 0.530645586973595,\n",
              "       0.307154571743430, 2.51146697346403, -0.834472961545393,\n",
              "       0.555787176777891], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Ajustamento pelo método combinado"
      ],
      "metadata": {
        "id": "DS7Vnt2gDlsa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$M = BW_1^{-1}B^{T}$"
      ],
      "metadata": {
        "id": "jy2IUZ-uDrL1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "M = B @ W.inv() @ B.T\n",
        "M"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "1qNqWLEXDpOR",
        "outputId": "54fc7657-b47e-4907-a88b-23a324d6b55b"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[1.35403641807329,                0,                0,                0,                0,                0,                0,                0,                 0,                0],\n",
              "[               0, 0.98173936201904,                0,                0,                0,                0,                0,                0,                 0,                0],\n",
              "[               0,                0, 1.59551883774621,                0,                0,                0,                0,                0,                 0,                0],\n",
              "[               0,                0,                0, 1.37544244948114,                0,                0,                0,                0,                 0,                0],\n",
              "[               0,                0,                0,                0, 1.40636227262582,                0,                0,                0,                 0,                0],\n",
              "[               0,                0,                0,                0,                0, 1.24085027814548,                0,                0,                 0,                0],\n",
              "[               0,                0,                0,                0,                0,                0, 1.80985896922877,                0,                 0,                0],\n",
              "[               0,                0,                0,                0,                0,                0,                0, 1.51101398173089,                 0,                0],\n",
              "[               0,                0,                0,                0,                0,                0,                0,                0, 0.926615333426265,                0],\n",
              "[               0,                0,                0,                0,                0,                0,                0,                0,                 0, 1.68002369376153]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}1.35403641807329 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0.98173936201904 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 1.59551883774621 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 1.37544244948114 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 1.40636227262582 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 1.24085027814548 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 1.80985896922877 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 1.51101398173089 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0.926615333426265 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1.68002369376153\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##vetor de correções X"
      ],
      "metadata": {
        "id": "3rZShhqKFsty"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "X = -(A.T @ M.inv() @ A).inv() @ A.T @ M.inv() @ erro\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "i9E7HzERGEfw",
        "outputId": "87a75b69-216b-4505-f2f0-71199b0faf30"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-1.63064006741820e-16, -4.19803081186387e-16, 2.22044604925031e-15,\n",
              "       1.09912079437890e-14], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Vetor K\n",
        "$K = -M^{-1}(AX+ε)$"
      ],
      "metadata": {
        "id": "jMNrTdB-GBeQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K = -M.inv() @ ((A @ X) + erro)\n",
        "K"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "YCR2h6AyGRRE",
        "outputId": "9056034e-0209-4b5b-b80f-74cb24d4f1c3"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.529312455981038, 0.205828007180108, -0.0608680749203774,\n",
              "       -0.153636667153128, 1.16909070496458, -0.427646748620368,\n",
              "       -0.169711881956365, -1.66210703794223, 0.900560277218641,\n",
              "       -0.330821034751897], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Vetor dos residuos\n"
      ],
      "metadata": {
        "id": "8y60Vi_8F3oO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "V = W.inv() @ B.T @ K\n",
        "V = sp.Matrix(V)\n",
        "V\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "SLXYf3BsF3BA",
        "outputId": "7037e94b-2de9-4d08-8b11-6858fa84330d"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[  0.358500163027791],\n",
              "[  0.422725253944969],\n",
              "[  0.244802304039109],\n",
              "[  0.101075889372279],\n",
              "[  0.119183574818341],\n",
              "[ 0.0690198029260529],\n",
              "[-0.0485778624443865],\n",
              "[-0.0572805575999561],\n",
              "[-0.0331714567470332],\n",
              "[  -0.10570224203464],\n",
              "[ -0.124638735807721],\n",
              "[-0.0721789138772956],\n",
              "[  0.822417443511015],\n",
              "[  0.969753039219721],\n",
              "[  0.561588824264616],\n",
              "[ -0.265430884933709],\n",
              "[  -0.31298267005179],\n",
              "[ -0.181249826070161],\n",
              "[ -0.153639852644903],\n",
              "[ -0.181164340838387],\n",
              "[ -0.104913173824096],\n",
              "[  -1.25624506754168],\n",
              "[  -1.48130062399025],\n",
              "[ -0.857828583325163],\n",
              "[  0.417406461249381],\n",
              "[  0.492184580446723],\n",
              "[  0.285026546631551],\n",
              "[ -0.278006801127519],\n",
              "[ -0.327811554149693],\n",
              "[ -0.189837306850215]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}0.358500163027791\\\\0.422725253944969\\\\0.244802304039109\\\\0.101075889372279\\\\0.119183574818341\\\\0.0690198029260529\\\\-0.0485778624443865\\\\-0.0572805575999561\\\\-0.0331714567470332\\\\-0.10570224203464\\\\-0.124638735807721\\\\-0.0721789138772956\\\\0.822417443511015\\\\0.969753039219721\\\\0.561588824264616\\\\-0.265430884933709\\\\-0.31298267005179\\\\-0.181249826070161\\\\-0.153639852644903\\\\-0.181164340838387\\\\-0.104913173824096\\\\-1.25624506754168\\\\-1.48130062399025\\\\-0.857828583325163\\\\0.417406461249381\\\\0.492184580446723\\\\0.285026546631551\\\\-0.278006801127519\\\\-0.327811554149693\\\\-0.189837306850215\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Vetor Ajustado LA\n",
        "LA = LB + V"
      ],
      "metadata": {
        "id": "MFRPmiN4Gcsi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "LA = LB + V\n",
        "LA = sp.Matrix(LA)\n",
        "LA"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "Y_MUpJN3Gfhy",
        "outputId": "941c15ce-4557-4b49-8459-4063a4dea02d"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[-0.921599836972209],\n",
              "[  2.84542525394497],\n",
              "[  5.29730230403911],\n",
              "[ -9.38042411062772],\n",
              "[ 0.701983574818341],\n",
              "[ 0.721919802926053],\n",
              "[ 0.944722137555613],\n",
              "[ -7.36568055759996],\n",
              "[  4.24802854325297],\n",
              "[ -1.39930224203464],\n",
              "[  0.14696126419228],\n",
              "[ 0.893121086122704],\n",
              "[-0.770182556488985],\n",
              "[ -5.34144696078028],\n",
              "[  1.83318882426462],\n",
              "[ -3.65873088493371],\n",
              "[  5.39371732994821],\n",
              "[  5.78625017392984],\n",
              "[  -6.0606398526449],\n",
              "[  6.89833565916161],\n",
              "[   2.1551868261759],\n",
              "[ -3.64164506754168],\n",
              "[ -1.59660062399025],\n",
              "[ 0.211671416674837],\n",
              "[ -3.58949353875062],\n",
              "[  7.42338458044672],\n",
              "[  2.48812654663155],\n",
              "[ -4.94150680112752],\n",
              "[ -8.73491155414969],\n",
              "[  3.30846269314978]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}-0.921599836972209\\\\2.84542525394497\\\\5.29730230403911\\\\-9.38042411062772\\\\0.701983574818341\\\\0.721919802926053\\\\0.944722137555613\\\\-7.36568055759996\\\\4.24802854325297\\\\-1.39930224203464\\\\0.14696126419228\\\\0.893121086122704\\\\-0.770182556488985\\\\-5.34144696078028\\\\1.83318882426462\\\\-3.65873088493371\\\\5.39371732994821\\\\5.78625017392984\\\\-6.0606398526449\\\\6.89833565916161\\\\2.1551868261759\\\\-3.64164506754168\\\\-1.59660062399025\\\\0.211671416674837\\\\-3.58949353875062\\\\7.42338458044672\\\\2.48812654663155\\\\-4.94150680112752\\\\-8.73491155414969\\\\3.30846269314978\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "69DY0MAELSom"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Teste do qui-quadrado\n"
      ],
      "metadata": {
        "id": "zbTQHi5rKU3s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "VTPV = V.T @ W @ V / 6\n",
        "VTPV"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "JfKQzOZwKWCH",
        "outputId": "4e644bff-2191-4813-b0c1-6737ed8eb02a"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([[1.29504211443812]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}1.29504211443812\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##media dos residuos para futuramente calcular o desvio padrão dos residuos\n"
      ],
      "metadata": {
        "id": "-rdlFnMELAg0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "media_residuos = sum(V) / len(V)\n",
        "media_residuos"
      ],
      "metadata": {
        "id": "HrgrQ8vR17zJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "outputId": "bec66ff3-104e-4d92-d83a-69ae599351c3"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.0389425523469015"
            ],
            "text/latex": "$\\displaystyle -0.0389425523469015$"
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculo de $\\sigma_{v}$\n"
      ],
      "metadata": {
        "id": "yKVxsFT3MJ4T"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "i9dq3ZQCMy0D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "V = sp.Matrix([V])  # Certifique-se de que V seja um vetor adequado\n",
        "\n",
        "# Calculando a média de V\n",
        "media_residuos = sp.Rational(sum(V), len(V))\n",
        "\n",
        "# Calculando o desvio padrão conforme a fórmula\n",
        "sigma_V = sp.sqrt(sp.Rational(1, len(V)) * sum((V[i] - media_residuos)**2 for i in range(len(V))))\n",
        "\n",
        "sigma_V\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "vpExjC8lMOrn",
        "outputId": "5808b823-f3fc-49b8-f3fd-992a1584d3e2"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.510461805291053"
            ],
            "text/latex": "$\\displaystyle 0.510461805291053$"
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4.** **Cálculo dos Resíduos Padronizados**:\n",
        "   Verifique a qualidade do ajuste calculando os resíduos padronizados e identifique possíveis outliers."
      ],
      "metadata": {
        "id": "Xla72rfp16Tn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "S = V/sigma_V\n",
        "S"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 627
        },
        "id": "jE6J0jzTM05S",
        "outputId": "854bc00c-560d-4eca-d1e6-08ffc720d158"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[   0.70230555804931],\n",
              "[  0.828123180937976],\n",
              "[  0.479570266573674],\n",
              "[  0.198008721366818],\n",
              "[  0.233481865994627],\n",
              "[  0.135210513716495],\n",
              "[-0.0951645391307751],\n",
              "[ -0.112213209698023],\n",
              "[-0.0649832297014262],\n",
              "[ -0.207071794479062],\n",
              "[ -0.244168583262864],\n",
              "[ -0.141399245015288],\n",
              "[   1.61112434855355],\n",
              "[   1.89975631706037],\n",
              "[   1.10015836335573],\n",
              "[ -0.519981871674742],\n",
              "[ -0.613136314622667],\n",
              "[ -0.355070299465045],\n",
              "[ -0.300982073589817],\n",
              "[ -0.354902833004501],\n",
              "[ -0.205526001625679],\n",
              "[   -2.4609971882723],\n",
              "[  -2.90188337038389],\n",
              "[  -1.68049514074035],\n",
              "[  0.817703610579416],\n",
              "[  0.964194725922914],\n",
              "[  0.558369977297393],\n",
              "[ -0.544618222648423],\n",
              "[ -0.642186253215915],\n",
              "[ -0.371893263869124]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}0.70230555804931\\\\0.828123180937976\\\\0.479570266573674\\\\0.198008721366818\\\\0.233481865994627\\\\0.135210513716495\\\\-0.0951645391307751\\\\-0.112213209698023\\\\-0.0649832297014262\\\\-0.207071794479062\\\\-0.244168583262864\\\\-0.141399245015288\\\\1.61112434855355\\\\1.89975631706037\\\\1.10015836335573\\\\-0.519981871674742\\\\-0.613136314622667\\\\-0.355070299465045\\\\-0.300982073589817\\\\-0.354902833004501\\\\-0.205526001625679\\\\-2.4609971882723\\\\-2.90188337038389\\\\-1.68049514074035\\\\0.817703610579416\\\\0.964194725922914\\\\0.558369977297393\\\\-0.544618222648423\\\\-0.642186253215915\\\\-0.371893263869124\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "### **Análise de Outliers:**\n"
      ],
      "metadata": {
        "id": "oRxGQxsM2XQX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calcule os resíduos padronizados e identifique se há outliers significativos nas observações.\n"
      ],
      "metadata": {
        "id": "0RS5TJxe2dK3"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9Aw4IIAU2cen"
      },
      "execution_count": 39,
      "outputs": []
    }
  ]
}
